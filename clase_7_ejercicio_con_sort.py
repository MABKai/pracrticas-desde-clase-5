# -*- coding: utf-8 -*-
"""Clase 7 ejercicio con sort.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSDHHrP1Za0qSe7SlnUEE15ZoqLER8eR
"""

#    Ejercicio Clase 7 version con sort
# Aqui ademas de ingresar el nombre
# Validar que no este vacio
# Colocar en mayusculas los nombres
# Asentar que con fin se de por terminado el ingreso
# VALIDAR NO CARATERES NO ALFABETICOS INGRESADOS NI EN NOMBRE NI EN APEKLIDO
# SEÃ‘ALA ERROR Y PIDE REINGRESO
# ORDENAR ALFABETICAMENTE LOS DATOS INGRESADOS CON SORT
# IMPRIMIR LISTA ORDENADA

# INGRESAREMOS APELLIDO Y NOMBRE GUARDANDOLOS EN LISTA nombre_apellio por si necesita la lista ingresada
# SOLICITAREMOS  se ingrese fin para terminar
# Los ingresos los colocamos en minusculas, con la primera inicial en mayuscula de este modo el Fin, este como
# Este escrito, conduce al fin del programna y arreoja sus resulatdos

clientes=[] # LISTA CON CLIENTES INGRESADOS

division_nombre=[]
nombre_apellido=[]
nombre=""
apellido=""
# Ingreso de datos
print("Ingrese su nombre y apellido. Para finalizar, ingrese Fin ")
# Analisis de los datos
while True: # Bucle para que se ingresen todos los clientes que necesiten y se finaliza con una termino a intorducir
      nombre_apellido=input("Ingrese su nombre y apellido: ")
      if nombre_apellido.capitalize()== "Fin": # Coloco la inicial en mayuscula y si es igual a Fin sea ingresado como sea, se acab el prpgrama
          break
      while True: # Bucle para analizar los datos ingresados hasta que esten correctos
        nombre_apellido=nombre_apellido.strip().lower() # Quito espacios al principio y final, coloco cadena en minuscula
        # A la cadena intriducida la separo para el analisis particular
        division_nombre=nombre_apellido.split() # de lo contrario separo el apellido del nombre
        # Determino con len, que el ingreso no haya sido nulo, que no falte ela apellido o nombre
        if len(nombre_apellido) < 1 or len(division_nombre)<2:
              nombre_apellido=print("Error.") # El error corta el bucle enviandonos al inicio del bucle anterior solicitando el ingreso de datos
              break
        else:
        #si esta correcto, separo en lista ingresada en nombre y apellido.
            nombre=division_nombre[0] # El primer termino del ingreso ocupa el lugar 0 y se almacena en nombre"
            apellido=division_nombre[1] # El segundo termino, el que ocupa el segundo lugar, se toma como apellido y se aloja en apellido
      ### EL PRXIMO TRATO DE HACERLO CON INGRESO DE NOMBRE COMPUESTOS Y APELLIDOS COMPUESTOS
            if not nombre.isalpha(): # Valido que no haya caracteres no alfabeticos en nombre
              nombre=print("ERROR. Nombre Contiene Caracteres No Alfabeticos") #de haberlos, indico error"
              break # Termino el bucle para enviar al usario al 1er bucle para ingresar datos o dar fin
            #  Si todo esta correcto valido que no haya carcatres no alfabeticos en apellido
            # Igual que con nombre, de haber error, se informa y se enviaal principio, de lo contrario continua
            else:
               if not apellido.isalpha():
                  apellido=print("ERROR. Apellido Contiene Caracteres No Alfabeticos.")
                  break
            # Llegar aqui indica que todoe sta correcto, entonces
               else:
                  apellido_nombre=apellido.capitalize(), nombre.capitalize()# invierto el orden del nombre y apellido y lo pongo en mayuscula
                  clientes.append(apellido_nombre) # Los agrego a la lista Clientes, se envia al inicio del otro bucle para ingreso/fin
                  break

# Una vez concluido los ongresos con la palabra fin, de imprime la lista clientes ordenados alfabticamnte por apellido
clientes.sort()
print(clientes)